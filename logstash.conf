input {
    stdin {}
}

filter {
    # Initial parsing
    grok {
        match => {
            "message" => "%{IPORHOST:ip}"
        }
    }
    public_ip {
        source => "ip"
        target_ipv => "src_ipv"
        target_pub_ip => "src_public_ip"
    }
    # SpamHaus IP Checker
    # https://www.spamhaus.org/faq/section/DNSBL%20Usage#200
    # https://www.spamhaus.org/zen/
    if [target_ipv] == 4 {  
        if [target_pub_ip] == [true] {
            grok {
                match => {
                    "message" => "%{WORD:addr1}.%{WORD:addr2}.%{WORD:addr3}.%{WORD:addr4}"
                }
            }
            mutate {
                add_field => {
                    "spamhaus_reverse_lookup" => "%{addr4}.%{addr3}.%{addr2}.%{addr1}.zen.spamhaus.org"
                }
            }
            dns {
                resolve => ["spamhaus_reverse_lookup"]
                nameserver => ["8.8.8.8"]
                add_tag => ["dns_successful_lookup"]
                action => replace
            }
            if "dns_successful_lookup" in [tags] {
                if [spamhaus_reverse_lookup] == "127.0.0.2" {
                    mutate {
                        add_tag => [ "spam_address" ]
                    }
                }
            }
        }
    }
    # IP AS + Country Info
    if [target_pub_ip] == [true] {
        geoip {
            source => "ip"
            target => "geoip"
        }
        geoip {
            default_database_type => "ASN"
            source => "ip"
            target => "asn"
        }
    }
    if [target_pub_ip] == [true] {
        ipinfo {
            ip => "ip"
        }
    }

    # RKN block check
    if [target_pub_ip] == [true] {
        http {
            url => "https://reestr.rublacklist.net/search/?q=%{ip}"
            target_body => "rkn_check"
        }
        # https://regex101.com/ - regex compiler
        grok {
            match => {
                "rkn_check" => "(?<cnt>(?::[[:blank:]]\d{1,5}\<\/h3>))"
            }
        }
        grok {
            match => {
                "cnt" => "(?<count>(?:\d{1,3}))"
            }
        }
        mutate {
            convert => {
                "count" => "integer"
            }
        }
        if [count] > 0 {
            mutate {
                add_tag => ["RKN blocklisted"]
            }
        }
    }

    # Virustotal check
    if [target_pub_ip] == [true] {
        virustotalthree{
            apikey => ""
            field => "ip"
            lookup_type => "ip"
            target => "VTinfo"
        }
    }

    # # Abuse IP DB check
    # if [target_pub_ip] == [true] {
    #     abuseip_db{
    #         apikey => ""
    #         ip => "ip"
    #         target => "AbIPDB_info"
    #     }
    # }

    # Final cleanup
    mutate {
        remove_field => ["addr1", "addr2", "addr3", "addr4", "ip", "message", "host", "spamhaus_reverse_lookup", "body", "headers", "rkn_check", "cnt", "count", "ipdb_check"]
    }
}

output {
    stdout {}
}