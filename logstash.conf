input {
    stdin {}
}

filter {

    # Initial parsing

    # SpamHaus IP Checker
    # https://www.spamhaus.org/faq/section/DNSBL%20Usage#200
    # https://www.spamhaus.org/zen/
    grok {
        match => {
            "message" => "%{WORD:addr1}.%{WORD:addr2}.%{WORD:addr3}.%{WORD:addr4}"
        }
    }
    mutate {
        add_field => {
            "spamhaus_reverse_lookup" => "%{addr4}.%{addr3}.%{addr2}.%{addr1}.zen.spamhaus.org"
        }
    }
    dns {
        resolve => ["spamhaus_reverse_lookup"]
        nameserver => ["8.8.8.8"]
        add_tag => ["dns_successful_lookup"]
        action => replace
    }
    if "dns_successful_lookup" in [tags] {
        if [spamhaus_reverse_lookup] == "127.0.0.2" {
            mutate {
                add_tag => [ "spam_address" ]
            }
        }
    }

    # IP AS + Country Info
    grok {
        match => {
            "message" => "%{IPORHOST:ip}"
        }
    }
    geoip {
        source => "ip"
        target => "geoip"
    }
    geoip {
        default_database_type => "ASN"
        source => "ip"
        target => "asn"
    }

    # Doesn't work(
    # ip2proxy
    # {
    #     source => "ip"
    #     database => "D:/admin/Downloads/studies/diplom/IP2PROXY-LITE-PX10.BIN"
    # }

    # RKN block check
    http {
        url => "https://reestr.rublacklist.net/search/?q=%{ip}"
        target_body => "rkn_check"
    }
    # https://regex101.com/ - regex compiler
    grok {
        match => {
            "rkn_check" => "(?<cnt>(?::[[:blank:]]\d{1,3}\<\/h3>))"
        }
    }
    grok {
        match => {
            "cnt" => "(?<am>(?:\d{1,3}))"
        }
    }
    grok {
        match => {
            "am" => "%{NUMBER:count}"
        }
    }
    if [count] > 0 {
        mutate {
            add_tag => ["RKN blocklisted"]
        }
    }
    
    # Final cleanup
    mutate {
        remove_field => ["addr1", "addr2", "addr3", "addr4", "ip", "message", "host", "spamhaus_reverse_lookup", "body", "headers", "rkn_check", "cnt", "count", "am"]
    }
}

output {
    stdout {}
}